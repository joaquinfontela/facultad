Object subclass: #AlgoFix	instanceVariableNames: 'pintores'	classVariableNames: ''	package: 'TP1'!!AlgoFix methodsFor: 'initialization' stamp: 'joaquinfontela 5/20/2020 18:18'!initialize	pintores := OrderedCollection new.! !!AlgoFix methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/21/2020 17:28'!registrarPintorDePincel: nombre conValorHora: valorHora 	| pintor |		pintor := ( PintorDePincel new ) inicializarConNombre: nombre yValorHora: valorHora.	self registrarPintor: pintor.! !!AlgoFix methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/19/2020 22:14'!registrarPintor: pintor 	pintores add: pintor.! !!AlgoFix methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/21/2020 17:28'!manoDeObra: valorManoDeObra masMateriales: valorMateriales 	"Recibe un precio de mano de obra, un precio de materiales y devuelve su suma."	| calculadora |		calculadora := CalculadoraDePresupuesto new.		^ ( calculadora manoDeObra: valorManoDeObra masMateriales: valorMateriales ).! !!AlgoFix methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/21/2020 17:28'!presupuestoMasBaratoParaPintarMetrosCuadrados: metrosCuadradosAPintar conPintura: pintura 		| optimizadorDePresupuesto |		optimizadorDePresupuesto := OptimizadorDePresupuesto new.		^ ( optimizadorDePresupuesto obtenerPresupuestoMasBaratoParaPintarMetrosCuadrados: metrosCuadradosAPintar conPintura: pintura yPintores: pintores ).		! !!AlgoFix methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/21/2020 17:28'!registrarPintorDeRodillo: nombre conValorHora: valorHora 	| pintor |		pintor := ( PintorDeRodillo new ) inicializarConNombre: nombre yValorHora: valorHora.	self registrarPintor: pintor.! !!AlgoFix methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/21/2020 17:27'!crearPintura: nombre conPrecioPorLitro: precio manosPincel: manosPincel manosRodillo: manosRodillo 	^ ( ( Pintura new ) inicializarConNombre: nombre precioPorLitro: precio manosPincel: manosPincel manosRodillo: manosRodillo ).! !Object subclass: #CalculadoraDePresupuesto	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!CalculadoraDePresupuesto methodsFor: 'initialization' stamp: 'joaquinfontela 5/19/2020 21:46'!initialize! !!CalculadoraDePresupuesto methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/20/2020 19:17'!manoDeObra: valorManoDeObra masMateriales: valorMateriales	"Recibe un precio de mano de obra, un precio de materiales y devuelve su suma."	^ (valorManoDeObra + valorMateriales).! !!CalculadoraDePresupuesto methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/20/2020 17:09'!obtenerPresupuestoConValorManoDeObra: valorManoDeObra valorMateriales: valorMateriales yResponsable: nombreResponsable	^ ((Presupuesto new) inicializarConResponsable: nombreResponsable yValor: (self manoDeObra: valorManoDeObra masMateriales: valorMateriales)).! !Object subclass: #OptimizadorDePresupuesto	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!OptimizadorDePresupuesto methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/21/2020 17:30'!obtenerPresupuestoMasBaratoParaPintarMetrosCuadrados: metrosCuadradosAPintar conPintura: pintura yPintores: pintores	| presupuestos |		( pintores isEmpty ) ifTrue: [ 		SinPintoresError signal: 'No hay pintores registrados.'		 ].		presupuestos := pintores collect: [ :pintor | pintor obtenerPresupuestoConMetrosCuadrados: metrosCuadradosAPintar yPintura: pintura ].		^ ( self obtenerPresupuestoMasBarato: presupuestos ).! !!OptimizadorDePresupuesto methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/21/2020 17:29'!obtenerPresupuestoMasBarato: presupuestos	"Devuelve el presupuesto de menor valor de la lista recibida."	| menorPresupuesto |		menorPresupuesto := ( Presupuesto new ) inicializarConResponsable: nil yValor: Float infinity.		presupuestos do: [ :presupuesto | 				( presupuesto tieneUnMenorValorQue: menorPresupuesto ) ifTrue: [ 			menorPresupuesto := presupuesto		].			].	^ menorPresupuesto.		! !!OptimizadorDePresupuesto methodsFor: 'initialization' stamp: 'joaquinfontela 5/20/2020 17:29'!initialize! !Object subclass: #Pintor	instanceVariableNames: 'nombre valorHora'	classVariableNames: ''	package: 'TP1'!!Pintor methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/21/2020 17:30'!obtenerPresupuestoConMetrosCuadrados: metrosCuadradosAPintar yPintura: pintura	"Devuelve el presupuesto del pintor para pintar la cantidad de metros cuadrados recibida, con la pintura recibida."	| calculadora valorManoDeObra valorMateriales |		calculadora := CalculadoraDePresupuesto new.		valorManoDeObra := self obtenerValorManoDeObraConMetrosCuadrados: metrosCuadradosAPintar yPintura: pintura.	valorMateriales := self obtenerValorMaterialesConMetrosCuadrados: metrosCuadradosAPintar yPintura: pintura.  		^ ( calculadora obtenerPresupuestoConValorManoDeObra: valorManoDeObra valorMateriales: valorMateriales yResponsable: nombre ).! !!Pintor methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/21/2020 17:30'!inicializarConNombre: nombreIngresado yValorHora: valorHoraIngresado	( valorHoraIngresado < 0 ) ifTrue: [ 		ValorNegativoError signal: 'El valor hora del pintor no puede ser menor a 0.'		 ].		nombre := nombreIngresado.	valorHora := valorHoraIngresado. ! !!Pintor methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/20/2020 01:39'!litrosDePinturaParaUnMetroCuadrado		self subclassResponsibility.! !!Pintor methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/20/2020 01:06'!obtenerManos: pintura		self subclassResponsibility.! !!Pintor methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/21/2020 17:31'!obtenerValorManoDeObraConMetrosCuadrados: metrosCuadradosAPintar yPintura: pintura	( metrosCuadradosAPintar < 0 ) ifTrue: [ 		ValorNegativoError signal: 'La cantidad de metros cuadrados a pintar no puede ser menor a 0.'				 ].	^ ( metrosCuadradosAPintar * ( self horasEnPintarUnMetroCuadrado ) * ( self obtenerValorHora: metrosCuadradosAPintar ) * ( self obtenerManos: pintura ) )! !!Pintor methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/21/2020 17:31'!obtenerValorMaterialesConMetrosCuadrados: metrosCuadradosAPintar yPintura: pintura	( metrosCuadradosAPintar < 0 ) ifTrue: [ 		ValorNegativoError signal: 'La cantidad de metros cuadrados a pintar no puede ser menor a 0.'				 ].	^ ( metrosCuadradosAPintar * ( pintura obtenerPrecio: ( self litrosDePinturaParaUnMetroCuadrado ) ) * ( self obtenerManos: pintura ) )! !!Pintor methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/20/2020 00:58'!obtenerValorHora: metrosCuadradosAPintar 		^ valorHora.! !!Pintor methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/20/2020 01:22'!horasEnPintarUnMetroCuadrado	self subclassResponsibility.! !Pintor subclass: #PintorDePincel	instanceVariableNames: ''	classVariableNames: 'horasEnPintarUnMetroCuadrado litrosDePinturaParaUnMetroCuadrado'	package: 'TP1'!!PintorDePincel methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/20/2020 01:05'!obtenerValorHora: metrosCuadradosAPintar 	| hayDescuento |		hayDescuento := ( metrosCuadradosAPintar > 40 ).		hayDescuento ifTrue: [ ^ ( valorHora/2 ) ].		^ valorHora.	! !!PintorDePincel methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/21/2020 17:31'!obtenerManos: pintura	^ ( pintura obtenerManosPincel ).! !!PintorDePincel methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/20/2020 01:22'!horasEnPintarUnMetroCuadrado		^ horasEnPintarUnMetroCuadrado.! !!PintorDePincel methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/20/2020 01:39'!litrosDePinturaParaUnMetroCuadrado 	^ litrosDePinturaParaUnMetroCuadrado.! !!PintorDePincel methodsFor: 'initialization' stamp: 'joaquinfontela 5/20/2020 00:55'!initialize 		horasEnPintarUnMetroCuadrado := 2.	litrosDePinturaParaUnMetroCuadrado := 4.! !Pintor subclass: #PintorDeRodillo	instanceVariableNames: ''	classVariableNames: 'horasEnPintarUnMetroCuadrado litrosDePinturaParaUnMetroCuadrado'	package: 'TP1'!!PintorDeRodillo methodsFor: 'initialization' stamp: 'joaquinfontela 5/20/2020 00:55'!initialize 		horasEnPintarUnMetroCuadrado := 1.	litrosDePinturaParaUnMetroCuadrado := 5.! !!PintorDeRodillo methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/21/2020 17:31'!obtenerManos: pintura	^ ( pintura obtenerManosRodillo ).! !!PintorDeRodillo methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/20/2020 01:23'!horasEnPintarUnMetroCuadrado	^ horasEnPintarUnMetroCuadrado.! !!PintorDeRodillo methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/20/2020 01:40'!litrosDePinturaParaUnMetroCuadrado 	^ litrosDePinturaParaUnMetroCuadrado.! !Object subclass: #Pintura	instanceVariableNames: 'nombre precioPorLitro manosPincel manosRodillo'	classVariableNames: ''	package: 'TP1'!!Pintura methodsFor: 'initialization' stamp: 'joaquinfontela 5/19/2020 22:23'!initialize! !!Pintura methodsFor: 'initialization' stamp: 'joaquinfontela 5/20/2020 20:23'!inicializarConNombre: nombreIngresado precioPorLitro: precioIngresado manosPincel: manosPincelIngresado manosRodillo: manosRodilloIngresado	( precioIngresado < 0 ) ifTrue: [ 		ValorNegativoError signal: 'El precio por litro ingresado no puede ser menor a 0.' 		].	( manosPincelIngresado < 0 ) ifTrue: [ 		ValorNegativoError signal: 'manosPincel no puede ser menor a 0.' 		].	( manosRodilloIngresado < 0 ) ifTrue: [ 		ValorNegativoError signal: 'manosRodillo no puede ser menor a 0.' 		].		nombre := nombreIngresado.	precioPorLitro := precioIngresado.	manosPincel := manosPincelIngresado.	manosRodillo := manosRodilloIngresado.! !!Pintura methodsFor: 'initialization' stamp: 'joaquinfontela 5/21/2020 17:34'!obtenerPrecio: litros	( litros < 0 ) ifTrue: [ 		ValorNegativoError signal: 'La cantidad de litros no puede ser menor a 0.'				 ].	^ (precioPorLitro * litros).! !!Pintura methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/19/2020 22:48'!obtenerManosPincel	^ manosPincel.! !!Pintura methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/19/2020 22:49'!obtenerManosRodillo	^ manosRodillo.! !Object subclass: #Presupuesto	instanceVariableNames: 'responsable valor'	classVariableNames: ''	package: 'TP1'!!Presupuesto methodsFor: 'as yet unclassified' stamp: 'joaquinfontela 5/21/2020 17:34'!tieneUnMenorValorQue: presupuesto 	"Recibe otro presupuesto, y devuelve True si el valor propio es menor al del presupuesto recibido,	o False en caso contrario."	^ ( self valor < presupuesto valor ).! !!Presupuesto methodsFor: 'accessing' stamp: 'joaquinfontela 5/20/2020 17:05'!initialize ! !!Presupuesto methodsFor: 'accessing' stamp: 'joaquinfontela 5/20/2020 17:05'!valor	^ valor.! !!Presupuesto methodsFor: 'accessing' stamp: 'joaquinfontela 5/21/2020 17:34'!inicializarConResponsable: nombreResponsable yValor: valorTotal	( valorTotal < 0 ) ifTrue: [ 		ValorNegativoError signal: 'El valor total del presupuesto no puede ser menor a 0.'		 ].	responsable := nombreResponsable.	valor := valorTotal.! !!Presupuesto methodsFor: 'accessing' stamp: 'joaquinfontela 5/20/2020 17:05'!responsable	^ responsable.! !Error subclass: #SinPintoresError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Error subclass: #ValorNegativoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!